if (typeof Skel == 'undefined') Skel = {};

/**
 * Observable - a base Observable class that allows objects to handle and delegate
 * a variety of different events.
 *
 * Example:
 *
 *    // Assume `clickableBox` extends Observable and `joyfulExploder` is a listener
 *    // of `clickableBox`
 *
 *    clickableBox.addEventListener('click', joyfulExploder); 
 *    
 *    // Now when the user clicks `clickableBox`, `joyfulExploder`s `respondeToEvent` method
 *    // is called with eventType 'click' and clickableBox passed as observable
 *
 *    clickableBox.removeEventListener('click', joyfulExploder);
 *
 *    // Now nothing happens when clickableBox is clicked
 *
 * Note that this class does not replace HTMLElement.addEventListener and related functions.
 * It is meant to provide similar functionality to non-HTMLElement objects
 *
 */

Skel.Observable = function() {
}
Skel.Observable.prototype = Object.create(Object.prototype);
Skel.Observable.prototype.listeners = {};

/**
 * Checks to see if the given `listener` is registered for the given `eventType`
 *
 * @param String eventType - an arbitrary string denoting the event type to check
 * @param Object listener - the object being checked
 */
Skel.Observable.prototype.indexOf = function(eventType, listener) {
  for(var i = 0; i < this.listeners[eventType].length; i++) {
    if (this.listeners[eventType][i] === listener) return i;
  }
  return false;
},

/**
 * Registers an object as a listener of an event generated by this Observable
 *
 * @param String eventType - an arbitrary string denoting the event type to be observed
 * @param Object listener - the object being registered as a listener
 */
Skel.Observable.prototype.addEventListener = function(eventType, listener) {
  if (!this.listeners[eventType]) this.listeners[eventType] = [];

  // Make sure the listener's capable
  if (!listener.respondToEvent) throw "Registered "+eventType+" listeners must implement the respondToEvent(String eventType, Skel.Observable observable)` function!";

  // If not already registered, register it
  if (this.indexOf(eventType, listener) === false) this.listeners[eventType].push(listener);

  return this;
},

/**
 * Removes a listener
 *
 * @param String eventType - an arbitrary string denoting the event type of the listener
 * @param Object listener - the object to be removed
 */
Skel.Observable.prototype.removeEventListener = function(eventType, listener) {
  if ((i = this.indexOf(eventType, listener)) !== false) delete this.listeners[eventType][i];
}


/**
 * Notify listeners that the given event has occurred
 *
 * @param String eventType - arbitrary string denoting the event type that has just occurred
 */

Skel.Observable.prototype.notifyEventListeners = function(eventType) {
  // Iterate through listeners and notify
  if (!this.listeners[eventType]) return;
  for(var i = 0; i < this.listeners[eventType].length; i++) this.listeners[eventType][i].respondToEvent.call(this.listeners[eventType][i], eventType, this);
}

